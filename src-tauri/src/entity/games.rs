//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "games")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub bgm_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub vndb_id: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub id_type: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub date: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub localpath: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub savepath: Option<String>,
    pub autosave: Option<i32>,
    pub clear: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub custom_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub custom_cover: Option<String>,
    pub created_at: Option<i32>,
    pub updated_at: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::bgm_data::Entity")]
    BgmData,
    #[sea_orm(has_many = "super::game_collection_link::Entity")]
    GameCollectionLink,
    #[sea_orm(has_many = "super::game_sessions::Entity")]
    GameSessions,
    #[sea_orm(has_one = "super::game_statistics::Entity")]
    GameStatistics,
    #[sea_orm(has_one = "super::other_data::Entity")]
    OtherData,
    #[sea_orm(has_many = "super::savedata::Entity")]
    Savedata,
    #[sea_orm(has_one = "super::vndb_data::Entity")]
    VndbData,
}

impl Related<super::bgm_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BgmData.def()
    }
}

impl Related<super::game_collection_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameCollectionLink.def()
    }
}

impl Related<super::game_sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameSessions.def()
    }
}

impl Related<super::game_statistics::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameStatistics.def()
    }
}

impl Related<super::other_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OtherData.def()
    }
}

impl Related<super::savedata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Savedata.def()
    }
}

impl Related<super::vndb_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VndbData.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
