name: Release

on:
  push:
    tags:
      - 'v*'  # 匹配所有以v开头的tag，如v1.0.0
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g.: v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: windows-latest
    strategy:
      matrix:
        rust_target: [ x86_64-pc-windows-msvc, aarch64-pc-windows-msvc ]
    environment: TAURI_KEY
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的git历史用于changelog

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies
        run: pnpm install

      - name: Build and Release with Tauri Action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_UPDATER_ACTIVE: true
        with:
          tagName: ${{ github.ref_name }}
          releaseName: ${{ github.ref_name }}
          releaseBody: "Draft release, will be updated later."
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: true
          includeRelease: true
          releaseCommitish: ${{ github.sha }}
          tauriScript: pnpm tauri
          args: --target ${{ matrix.rust_target }}

  finalize_release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract changelog for current version
        id: changelog
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Looking for version: $VERSION"
          
          if [ -f "CHANGELOG.md" ]; then
            # 使用更安全的方式处理多行内容，支持多种版本格式
            CHANGELOG_FILE=$(mktemp)
            # 支持 0.6.6-1, v0.6.6-1, [0.6.6-1], [v0.6.6-1] 等格式
            awk "
            /^## \[?v?${VERSION//./\\.}\]?/ ||
            /^## \[?v?${VERSION//./\\.}[[:space:]]*\]/ ||
            /^## v?${VERSION//./\\.}[[:space:]]*$/ ||
            /^## \[?v?${VERSION//./\\.}\)?[[:space:]]*\(/ {
              flag=1; next
            } 
            /^## / && flag {
              flag=0
            } 
            flag {
              print
            }" CHANGELOG.md > "$CHANGELOG_FILE"
            
            if [ -s "$CHANGELOG_FILE" ]; then
              {
                echo "CHANGELOG_CONTENT<<EOF"
                cat "$CHANGELOG_FILE"
                echo "EOF"
              } >> $GITHUB_OUTPUT
              echo "Found changelog content"
            else
              echo "CHANGELOG_CONTENT=See the assets to download and install this version." >> $GITHUB_OUTPUT
              echo "No matching changelog found for version $VERSION"
            fi
            rm -f "$CHANGELOG_FILE"
          else
            echo "CHANGELOG_CONTENT=See the assets to download and install this version." >> $GITHUB_OUTPUT
            echo "CHANGELOG.md not found"
          fi

      - name: Determine release type
        id: release-type
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" == *"alpha"* ]] || [[ "${{ github.ref_name }}" == *"beta"* ]] || [[ "${{ github.ref_name }}" == *"rc"* ]] || [[ "${{ github.ref_name }}" == *"pre"* ]] || [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish Final Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
          draft: false
          prerelease: ${{ steps.release-type.outputs.IS_PRERELEASE }}
          token: ${{ secrets.GITHUB_TOKEN }}

  update_cdn_urls:
    name: Update CDN URLs in latest.json
    runs-on: ubuntu-latest
    needs: finalize_release
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update latest.json with CDN URLs
        shell: bash
        run: |
          TAG_NAME="${{ github.ref_name }}"
          URL="https://github.com/huoshen80/ReinaManager/releases/download/$TAG_NAME/latest.json"

          # 尝试下载，最多重试5次，每次间隔5秒
          n=0
          until [ "$n" -ge 5 ]
          do
            curl -L -f -o latest.json "$URL" && break
            n=$((n+1))
            sleep 5
          done

          if [ ! -f "latest.json" ]; then
              echo "Error: Could not download latest.json after several retries."
              exit 1
          fi
          
          if [ -f "latest.json" ]; then
            echo "Original latest.json:"
            cat latest.json
            
            # 使用 jq 修改 URL，在前面添加 CDN 前缀
            jq '
              .platforms |= with_entries(
                .value.url |= "https://gh.huoshen80.top/\(.)"
              )
            ' latest.json > latest_modified.json
            
            echo "Modified latest.json:"
            cat latest_modified.json

            # 用修改后的文件覆盖本地 latest.json
            mv -f latest_modified.json latest.json
            
            # 重新上传修改后的 latest.json
            gh release delete-asset "$TAG_NAME" "latest.json" || true
            gh release upload $TAG_NAME "latest.json" --clobber
            
            echo "Successfully updated latest.json with CDN URLs"
          else
            echo "Error: Could not download latest.json"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}