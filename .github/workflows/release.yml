name: Release

on:
  push:
    tags:
      - 'v*'  # 匹配所有以v开头的tag，如v1.0.0
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g.: v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: windows-latest
    environment: TAURI_KEY  # 指定使用这个环境
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的git历史用于changelog

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies
        run: pnpm install
      
      - name: Get release info
        id: release_info
        shell: bash
        run: |
          # 获取版本号
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # 确定tag名称
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF_NAME}
          else
            TAG_NAME="${{ github.event.inputs.tag_name }}"
          fi
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION, Tag: $TAG_NAME"

      - name: Extract changelog for current version
        id: changelog
        shell: bash
        run: |
          TAG_NAME="${{ steps.release_info.outputs.TAG_NAME }}"
          VERSION="${{ steps.release_info.outputs.VERSION }}"
          
          # 尝试从CHANGELOG.md提取当前版本的内容
          if [ -f "CHANGELOG.md" ]; then
            # 查找当前版本的changelog条目
            CHANGELOG_CONTENT=$(awk "/^## \[?${VERSION}\]?|^## \[?${TAG_NAME}\]?/{flag=1; next} /^## /{flag=0} flag {print}' CHANGELOG.md)
            
            if [ -n "$CHANGELOG_CONTENT" ]; then
              echo "Found changelog content for version $VERSION"
              echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
              echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "No changelog content found for version $VERSION"
              echo "CHANGELOG_CONTENT=" >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG.md not found"
            echo "CHANGELOG_CONTENT=" >> $GITHUB_OUTPUT
          fi

      - name: Setup Tauri signing
        shell: bash
        run: |
          mkdir -p ~/.tauri
          echo "${{ secrets.TAURI_PRIVATE_KEY }}" > ~/.tauri/myapp.key

      - name: Build project
        env:
          GITHUB_ACTIONS: true
          TAURI_SIGNING_PRIVATE_KEY: ~/.tauri/myapp.key
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: pnpm tauri build

      - name: Cleanup private key
        if: always()  # 无论成功失败都执行清理
        shell: bash
        run: |
          if [ -f ~/.tauri/myapp.key ]; then
            # 安全删除私钥文件
            rm -f ~/.tauri/myapp.key
            echo "Private key cleaned up"
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.TAG_NAME }}
          name: ${{ steps.release_info.outputs.TAG_NAME }}
          body: |
            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
            
            Windows x64 installers for ReinaManager.
            - Version: ${{ steps.release_info.outputs.TAG_NAME }}
            - Includes: NSIS .exe and MSI installers
            - Architecture: win_x64
            
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          generate_release_notes: true
          files: |
            LICENSE
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi