name: Release

on:
  push:
    tags:
      - 'v*'  # 匹配所有以v开头的tag，如v1.0.0
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g.: v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: windows-latest
    environment: TAURI_KEY
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的git历史用于changelog

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies
        run: pnpm install

      - name: Determine release type
        id: release-type
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" == *"alpha"* ]] || [[ "${{ github.ref_name }}" == *"beta"* ]] || [[ "${{ github.ref_name }}" == *"rc"* ]] || [[ "${{ github.ref_name }}" == *"pre"* ]] || [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract changelog for current version
        id: changelog
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          
          if [ -f "CHANGELOG.md" ]; then
            # 使用更安全的方式处理多行内容
            CHANGELOG_FILE=$(mktemp)
            awk "/^## \[?${VERSION}\]?|^## \[?v${VERSION}\]?/{flag=1; next} /^## /{flag=0} flag {print}" CHANGELOG.md > "$CHANGELOG_FILE"
            
            if [ -s "$CHANGELOG_FILE" ]; then
              {
                echo "CHANGELOG_CONTENT<<EOF"
                cat "$CHANGELOG_FILE"
                echo "EOF"
              } >> $GITHUB_OUTPUT
            else
              echo "CHANGELOG_CONTENT=See the assets to download and install this version." >> $GITHUB_OUTPUT
            fi
            rm -f "$CHANGELOG_FILE"
          else
            echo "CHANGELOG_CONTENT=See the assets to download and install this version." >> $GITHUB_OUTPUT
          fi

      - name: Build and Release with Tauri Action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_UPDATER_ACTIVE: true
        with:
          tagName: ${{ github.ref_name }}
          releaseName: ${{ github.ref_name }}
          releaseBody: ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
          releaseDraft: ${{ github.event.inputs.prerelease || false }}
          prerelease: ${{ steps.release-type.outputs.IS_PRERELEASE }}
          includeUpdaterJson: true
          includeRelease: true
          releaseCommitish: ${{ github.sha }}